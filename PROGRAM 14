NoSQL - AGGREGATE FUNCTIONS AND REGULAR EXPRESSIONS

INVOICE> db.customer.updateOne( { customer_id: "102" }, { $set: { age: 35 } })
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
INVOICE> db.customer.updateOne( { customer_id: "101" }, { $set: { age: 30 } } )
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
INVOICE> db.customer.insertOne({
... customer_id:"103",
... name:"Sin",
... addresss:{street:"3 main st",city:"CLT",zip:"457854"},
... phone:"4562178364",
... age:45
... })
{
  acknowledged: true,
  insertedId: ObjectId('6801f790503e24f552b5f89c')
}

INVOICE> db.customer.find({})
[
  {
    _id: ObjectId('6801f6b3503e24f552b5f89a'),
    customer_id: '101',
    name: 'Bob',
    address: { street: '1 main st', city: 'New York', zip: '123456' },
    phone: '123456785',
    age: 30
  },
  {
    _id: ObjectId('6801f6b3503e24f552b5f89b'),
    customer_id: '102',
    name: 'Alice',
    address: { street: '2 main st', city: 'TVM', zip: '456123' },
    phone: '123457813',
    age: 35
  },
  {
    _id: ObjectId('6801f790503e24f552b5f89c'),
    customer_id: '103',
    name: 'Sin',
    addresss: { street: '3 main st', city: 'CLT', zip: '457854' },
    phone: '4562178364',
    age: 45
  }
]

1.Write a MongoDB query to sort customer details in ascending order of their name.

INVOICE> db.customer.find().sort({name:1})
[
  {
    _id: ObjectId('6801f6b3503e24f552b5f89b'),
    customer_id: '102',
    name: 'Alice',
    address: { street: '2 main st', city: 'TVM', zip: '456123' },
    phone: '123457813',
    age: 35
  },
  {
    _id: ObjectId('6801f6b3503e24f552b5f89a'),
    customer_id: '101',
    name: 'Bob',
    address: { street: '1 main st', city: 'New York', zip: '123456' },
    phone: '123456785',
    age: 30
  },
  {
    _id: ObjectId('6801f790503e24f552b5f89c'),
    customer_id: '103',
    name: 'Sin',
    address: { street: '3 main st', city: 'CLT', zip: '457854' },
    phone: '4562178364',
    age: 45
  }
]
2.Write a MongoDB query to count number of customers in each city.

INVOICE> db.customer.aggregate([
... {
... $group:{
... _id:"$address.city",
... customerCount:{$sum:1}
... }
... }
... ])
[
  { _id: 'TVM', customerCount: 1 },
  { _id: 'CLT', customerCount: 1 },
  { _id: 'New York', customerCount: 1 }
]

3.Write a MongoDB query to find minimum and maximum age in each city.
INVOICE> db.customer.aggregate([
...   {
...     $group: {
...       _id: "$address.city",    
...       minAge: { $min: "$age" }, 
...       maxAge: { $max: "$age" }   
...     }
...   }
... ])
[
  { _id: 'TVM', minAge: 35, maxAge: 35 },
  { _id: 'CLT', minAge: 45, maxAge: 45 },
  { _id: 'New York', minAge: 30, maxAge: 30 }
]

4.Write a MongoDB query using the $match stage to retrieve all customer documents whose customer_name starts with the letter “S”.

INVOICE> db.customer.find({ name: { $regex: /^S/ } })
[
  {
    _id: ObjectId('6801f790503e24f552b5f89c'),
    customer_id: '103',
    name: 'Sin',
    phone: '4562178364',
    age: 45,
    address: { street: '3 main st', city: 'CLT', zip: '457854' }
  }
]

5.Write a query using $lookup to join CUSTOMER and PRODUCT collections and display only customer name, product name, and price.

INVOICE> db.customer.updateOne(
... {customer_id:"101"},
... {$set:{p_id:"1"}}
... )
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
INVOICE> db.customer.updateOne(
... { customer_id: "102" },
... { $set: { p_id: "1" } }
... )
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
INVOICE> db.customer.updateOne(
... { customer_id: "103" },
... { $set: { p_id: "2" } }
... )
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}

INVOICE> db.customer.aggregate([
... { 
...  $lookup: {
...        from: "product",
...        localField: "p_id", 
...        foreignField:"p_id", 
...        as: "productInfo" 
...   } 
... }, 
... {
...  $project: {
...       _id: 0, 
...       customer_name: "$name,
...       product_name: "$productInfo.name", 
...       price: "$productInfo.price" 
...    }
... }
... ] )
[
  {
    customer_name: 'Bob',
    product_name: [ 'laptop' ],
    price: [ 20000 ]
  },
  {
    customer_name: 'Alice',
    product_name: [ 'laptop' ],
    price: [ 20000 ]
  },
  {
    customer_name: 'Sin', 
    product_name: [ 'mouse' ], 
    price: [ 1000 ] 
  }
]
